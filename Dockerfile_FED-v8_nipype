# Built as if generated by Neurodocker version 0.5.0
# Martin Hochheimer
# version 8

FROM neurodebian:stretch-non-free

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker


ENTRYPOINT ["/neurodocker/startup.sh"]


RUN apt-get update -qq \
        && apt-get install -y -q --no-install-recommends \
           convert3d \
	   ants \
	   fsl-complete \
	   afni \
           dcm2niix \
	   gcc \
           g++ \
           graphviz \
           tree \
           rename \
           git-annex-standalone \
           emacs-nox \
	   emacs-goodies-el \
           less \
           ncdu \
           tig \
           git-annex-remote-rclone \
	   octave \
           netbase \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN sed -i '$isource /etc/fsl/fsl.sh' $ND_ENTRYPOINT



ENV FORCE_SPMMCR="1" \
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2010a/v713/runtime/glnxa64:/opt/matlabmcr-2010a/v713/bin/glnxa64:/opt/matlabmcr-2010a/v713/sys/os/glnxa64:/opt/matlabmcr-2010a/v713/extern/bin/glnxa64" \
    MATLABCMD="/opt/matlabmcr-2010a/v713/toolbox/matlab"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && curl -fsSL --retry 5 -o "$TMPDIR/MCRInstaller.bin" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin \
    && chmod +x "$TMPDIR/MCRInstaller.bin" \
    && "$TMPDIR/MCRInstaller.bin" -silent -P installLocation="/opt/matlabmcr-2010a" \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR \
    && echo "Downloading standalone SPM ..." \
    && curl -fsSL --retry 5 -o /tmp/spm12.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7219_R2010a.zip \
    && unzip -q /tmp/spm12.zip -d /tmp \
    && mkdir -p /opt/spm12-r7219 \
    && mv /tmp/spm12/* /opt/spm12-r7219/ \
    && chmod -R 777 /opt/spm12-r7219 \
    && rm -rf /tmp/* \
    && /opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 quit \
	&& sed -i '$iexport SPMMCRCMD=\"/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 script\"' $ND_ENTRYPOINT


RUN test "$(getent passwd martin)" || useradd --no-user-group --create-home --shell /bin/bash martin

USER martin

WORKDIR /home/martin/FED


ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
#    && conda config --system --append channels krinsman \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean --all && sync \
    && conda create -y -q --name neuro \
    && conda install -y -q --name neuro \
           'python=3.7' \
           'traits' \
           'pytest' \
           'nodejs' \
           'jupyter' \
           'jupyterlab' \
           'jupyterlab-lsp' \
           'python-language-server' \
#           'jupyterlab-variableinspector' \ # these break the jupyter lab setup at the moment
#           'jupyterlab-toc' \
#           'jupyter_contrib_nbextensions' \
           'pandas' \
           'matplotlib' \
           'scikit-learn' \
           'scikit-image' \
           'seaborn' \
           'nbformat' \
           'nb_conda' \
    && sync && conda clean --all && sync \
    && bash -c "source activate neuro \
    && pip install --no-cache-dir  \
             https://github.com/nipy/nipype/tarball/master \
             https://github.com/INCF/pybids/tarball/master \
             nilearn \
             datalad[full] \
             nipy \
             nibabel \
	     niflow-nipype1-workflows \
             itk \
	     PsychoPy \
	     pydicom \
	     statsmodels \
             duecredit \
             nbval" \
# install niflow-nipype1-workflows to continue using embedded fsl nipype workflows (miykael- tutorial wont work otherwise)
    && rm -rf ~/.cache/pip/* \
    && sync \
	&& sed -i '$isource activate neuro' $ND_ENTRYPOINT

ENV LD_LIBRARY_PATH="/opt/miniconda-latest/envs/neuro:/usr/lib/fsl/5.0"


#RUN bash -c 'source activate neuro && jupyter nbextension enable exercise2/main && jupyter nbextension enable spellchecker/main && jupyter nbextension enable codefolding/main && jupyter nbextension enable execution_dependencies/execution_dependencies && jupyter nbextension enable help_panel/help_panel && jupyter nbextension enable hinterland/hinterland && jupyter nbextension enable scroll_down/main && jupyter nbextension enable autosavetime/main && jupyter nbextension enable codefolding/edit && jupyter nbextension enable runtools/main && jupyter nbextension enable select_keymap/main && jupyter nbextension enable toc2/main'



#RUN printf "[user]\n\tname = martin\n\temail = 43468442+MartinHochheimer@users.noreply.github.com\n" > ~/.gitconfig


COPY [".", "/home/martin/FED"]

USER root

RUN chown -R martin /home/martin/FED

RUN rm -rf /opt/conda/pkgs/*

USER martin

RUN mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > ~/.jupyter/jupyter_notebook_config.py \
        && echo c.NotebookApp.custom_display_url = 'http://localhost:8888' >> ~/.jupyter/jupyter_notebook_config.py


# jupyterlab configuration
# Create configuration file for python language server protocol
RUN mkdir -p ~/.config \
        && echo [pycodestyle] >> ~/.config/pycodestyle \
        && echo count = False >> ~/.config/pycodestyle \
        && echo ignore = E251,E265,E302,E303,E401,E402,E703 >> ~/.config/pycodestyle \
        && echo max-line-length = 160 >> ~/.config/pycodestyle \
        && echo statistics = False >> ~/.config/pycodestyle
#RUN mkdir -p ~/.jupyter/lab/user-settings/@jupyterlab/apputils-extension && mkdir -p ~/.jupyter/lab/user-settings/@jupyterlab/shortcuts-extension \
# write setting-files into created dirs
#        && tee -a ~/.jupyter/lab/user-settings/@jupyterlab/shortcuts-extension/shortcuts.jupyterlab-settings > /dev/null << EOF \
#    // List of Keyboard Shortcuts \
#    {"shortcuts": [ \
#        { \
#            "command": "notebook:run-in-console", \
#            "keys": [ \
#                "F9" \
#            ], \
#            "selector": ".jp-Notebook.jp-mod-editMode" \
#        }, \
#    ] \
#    } \
#EOF \
#        && tee -a ~/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings > /dev/null << EOF \
#{ \
#    // Theme \
#    // @jupyterlab/apputils-extension:themes \
#    // Theme manager settings. \
#    // ************************************* \
#\
#    // Selected Theme \
#    // Application-level visual styling theme \
#    "theme": "JupyterLab Dark" \
#} \
#EOF


WORKDIR /home/martin/FED

CMD ["jupyter-notebook"]

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "neurodebian:stretch" \
    \n    ], \
    \n    [ \
    \n      "spm12", \
    \n      { \
    \n        "version": "r7219" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "5.0.11" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "afni", \
    \n      { \
    \n        "version": "latest" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "ants", \
    \n      { \
    \n        "version": "2.3.1" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "psychopy", \
    \n        "dcm2niix", \
    \n        "python-pydicom", \
    \n        "python-mvpa2", \
    \n        "python-mne", \
    \n        "python-statsmodels", \
    \n        "convert3d", \
    \n        "gcc", \
    \n        "g++", \
    \n        "graphviz", \
    \n        "tree", \
    \n        "git-annex-standalone", \
    \n        "emacs-nox", \
    \n        "nano", \
    \n        "less", \
    \n        "ncdu", \
    \n        "tig", \
    \n        "git-annex-remote-rclone", \
    \n        "netbase" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "create_env": "neuro", \
    \n        "conda_install": [ \
    \n          "python=3.7", \
    \n          "traits", \
    \n          "pytest", \
    \n          "jupyter", \
    \n          "jupyterlab", \
    \n          "jupyter_contrib_nbextensions", \
    \n          "pandas", \
    \n          "matplotlib", \
    \n          "scikit-learn", \
    \n          "scikit-image", \
    \n          "seaborn", \
    \n          "nbformat", \
    \n          "nb_conda" \
    \n        ], \
    \n        "pip_install": [ \
    \n          "https://github.com/nipy/nipype/tarball/master", \
    \n          "https://github.com/INCF/pybids/tarball/0.7.1", \
    \n          "nilearn", \
    \n          "datalad[full]", \
    \n          "nipy", \
    \n          "duecredit", \
    \n          "nbval" \
    \n        ] \
    \n      } \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json
