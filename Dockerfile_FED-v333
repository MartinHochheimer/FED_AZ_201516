#########################################################################################
# Martin Hochheimer
# version 333
### this derivate version of my thesis' docker image does not use SPM,
# as it is necessary to build the image from one single source image
# to emulate the behaviour of the original setup, yet extend it massively
# by adding ANTs, AFNI, R, and PyTorch
# ... it is just far too messy to use a MATLAB application^^ ###
#########################################################################################

# General neurodocker setup
FROM debian:buster-slim AS neurodocker_base

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
# this defines the ENTRYPOINT variable to be used at the end
# the dockerfile will be adding numerous commands to it below
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker


# APT packages (includes those for coding notebook functionality, FSL and AFNI
# -> compiled here to minimalise number of layers)
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
#       Notebook functionalities
        fzf \
        ripgrep \
        tree \
        rename \
        fonts-dejavu \
        gfortran \
        gcc \
#       FSL, AFNI
        ed \
        bc \
        dc \
        file \
        gsl-bin \
        libglib2.0-0 \
        libglu1-mesa-dev \
        libglw1-mesa \
        libgl1-mesa-dev \
        libgl1-mesa-dri \
        libgomp1 \
        libjpeg62 \
        libnlopt-dev \
        libxm4 \
        libfontconfig1 \
        libfreetype6 \
        libice6 \
        libxcursor1 \
        libxft2 \
        libxinerama1 \
        libxrandr2 \
        libxrender1 \
        libxt6 \
        multiarch-support \
        netpbm \
        tcsh \
        xfonts-base \
        xvfb \
        sudo \
        wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && curl -sSL --retry 5 -o /tmp/toinstall.deb http://snapshot.debian.org/archive/debian-security/20160113T213056Z/pool/updates/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \
    && dpkg -i /tmp/toinstall.deb \
    && rm /tmp/toinstall.deb \
    && apt-get install -f \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && gsl2_path="$(find / -name 'libgsl.so.19' || printf '')" \
    && if [ -n "$gsl2_path" ]; then \
         ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0"; \
    fi \
    && ldconfig


# AFNI setup 
ENV AFNI_PLUGINPATH="/opt/afni-latest" \
    PATH="/opt/afni-latest:$PATH"
RUN echo "Downloading AFNI ..." \
    && mkdir -p /opt/afni-latest \
    && curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \
    | tar -xz -C /opt/afni-latest --strip-components 1


# ANTs setup
ENV ANTSPATH="/opt/ants-2.3.4" \
    PATH="/opt/ants-2.3.4:$PATH"
RUN echo "Downloading ANTs ..." \
    && mkdir -p /opt/ants-2.3.4 \
    && curl -fsSL --retry 5 https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz \
    | tar -xz -C /opt/ants-2.3.4 --strip-components 1


# FSL setup
ENV FSLDIR="/opt/fsl-6.0.4" \
    PATH="/opt/fsl-6.0.4/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.4/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.4/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN echo "Downloading FSL ..." \
    && mkdir -p /opt/fsl-6.0.4 \
    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos6_64.tar.gz \
    | tar -xz -C /opt/fsl-6.0.4 --strip-components 1 \
    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \
    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \
    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT

# print the combined installation of the neuroimaging packages to the neurodocker specs
RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "debian:buster-slim" \
    \n    ], \
    \n    [ \
    \n      "ants", \
    \n      { \
    \n        "version": "2.3.4" \
    \n      } \
    \n    ] \
    \n  ] \
    \n \
    \n    [ \
    \n      "base", \
    \n      "debian:buster-slim" \
    \n    ], \
    \n    [ \
    \n      "afni", \
    \n      { \
    \n        "method": "binaries", \
    \n        "version": "latest" \
    \n      } \
    \n    ] \
    \n  ] \
    \n \
    \n    [ \
    \n      "base", \
    \n      "debian:buster-slim" \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "6.0.4" \
    \n      } \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json


# build shell setup bash for user "martin" - me^^
RUN test "$(getent passwd martin)" || useradd --no-user-group --create-home --shell /bin/bash martin

USER martin

WORKDIR /home/martin/work


######################################################################################
# Remaining Python Software and R setup

ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean --all && sync \
    && conda create -y -q --name neuro \
    && conda install -y -q --name neuro \
           'python=3.9' \
           'traits' \
           'pytest' \
           'nodejs' \
           'h5py' \
           'jupyter' \
           'jupyterlab' \
           'jupyterlab-lsp' \
           'python-lsp-server' \
           'r-languageserver' \
           'pandas' \
           'xlrd' \
           'matplotlib' \
           'scikit-learn' \
           'scikit-image' \
           'seaborn' \
           'nbformat' \
           'nb_conda' \
#           R integration into conda environment starts here
           'r-base' \
           'r-bayesfactor' \
           'r-ez' \
           'r-essentials' \
           'r-caret' \
           'r-crayon' \
           'r-devtools' \
           'r-e1071' \
           'r-forecast' \
           'r-lme4' \
           'r-ggpubr' \
           'r-ggpmisc' \
           'r-hexbin' \
           'r-htmltools' \
           'r-htmlwidgets' \
           'r-irkernel' \
           'r-mbess' \
           'r-nycflights13' \
           'r-randomforest' \
           'r-rcurl' \
           'r-rodbc' \
           'r-rsqlite' \
           'r-shiny' \
           'r-schoRsch' \
           'r-rstatix' \
           'r-xtable' \
           'rpy2' \
           'unixodbc' \
           'r-rmarkdown' \
           'r-tidymodels' \
           'r-tidyverse' \
# clean up conda and transfer to pip to finish up python
    && sync && conda clean --all && sync \
    && bash -c "source activate neuro \
    && pip install --no-cache-dir \
            traits \
            pytest \
            duecredit \
            nbval \
            https://github.com/nipy/nipype/tarball/master \
            https://github.com/INCF/pybids/tarball/master \
            nilearn \
            nipy \
            nibabel \
            nltools \
	        pydicom \
            torch \ 
            torchvision \
            torchaudio \
            pytorch-lightning" \
    && rm -rf ~/.cache/pip/* \
    && sync \
	&& sed -i '$isource activate neuro' $ND_ENTRYPOINT

# give FSL access to the whole lot of python functionalities
ENV LD_LIBRARY_PATH="/opt/miniconda-latest/envs/neuro:/usr/lib/fsl/6.0.4"


USER root

RUN chown -R martin /home/martin/work

RUN rm -rf /opt/conda/pkgs/*

USER martin

# this sets the notebook application settings, but will not directly take effect in 
# jupyter lab. We need to change the IP for that in the CMD or in the compose file.
RUN mkdir -p ~/.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > ~/.jupyter/jupyter_notebook_config.py \
        && echo c.NotebookApp.custom_display_url = 'http://localhost:8888' >> ~/.jupyter/jupyter_notebook_config.py


# jupyterlab configuration
# Create configuration file for python language server protocol
RUN mkdir -p ~/.config \
        && echo [pycodestyle] >> ~/.config/pycodestyle \
        && echo count = False >> ~/.config/pycodestyle \
        && echo ignore = E251,E265,E302,E303,E401,E402,E703 >> ~/.config/pycodestyle \
        && echo max-line-length = 160 >> ~/.config/pycodestyle \
        && echo statistics = False >> ~/.config/pycodestyle \
# symlink FSL data directory into the language server, so it can access it
        && mkdir -p ~/work/.lsp_symlink \
        && ln -s /usr/share/fsl/6.0.4/data ~/work/.lsp_symlink/fsl_data
# write the theme 
RUN mkdir -p ~/.jupyter/lab/user-settings/@jupyterlab/apputils-extension \
# write setting-files into created dir
        && echo '{ \
        \n    // Theme \
        \n    // @jupyterlab/apputils-extension:themes \
        \n    // Theme manager settings. \
        \n    // ************************************* \
        \n\
        \n    // Selected Theme \
        \n    // Application-level visual styling theme \
        \n    "theme": "JupyterLab Dark" \
        \n}' > ~/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings

########################################################################################

# configure final startup of jupyter lab
WORKDIR /home/martin/work

ENTRYPOINT ["/neurodocker/startup.sh"]
CMD ["jupyter-lab"]
